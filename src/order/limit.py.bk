#!/usr/bin/env python

import argparse
import common.config
from .args import OrderArguments, add_replace_order_id_argument
from .view import print_order_create_response_transactions

class Limit():

    args = None
    response = None
    transaction = None
    parser = argparse.ArgumentParser()
    common.config.add_argument(parser)
    errorCode = '' 
    errorMessage = ''

	def exec_by_cmd(self):
	
	    """
	    Create or replace an OANDA Limit Order in an Account based on the provided
	    command-line arguments.
    	"""
	
	
	    #
	    # Add the command line argument to parse to the v20 config
	    #
	
	    #
	    # Add the argument to support replacing an existing argument
	    #
	    add_replace_order_id_argument(parser)
	
	    #
	    # Add the command line arguments required for a Limit Order
	    #
	    orderArgs = OrderArguments(self.parser)
	    orderArgs.add_instrument()
	    orderArgs.add_units()
	    orderArgs.add_price()
	    orderArgs.add_time_in_force()
	    orderArgs.add_position_fill()
	    orderArgs.add_take_profit_on_fill()
	    orderArgs.add_stop_loss_on_fill()
	    orderArgs.add_trailing_stop_loss_on_fill()
	    orderArgs.add_client_order_extensions()
	    orderArgs.add_client_trade_extensions()
	
	    self.args = parser.parse_args()
	    #
	    # Extract the Limit Order parameters from the parsed arguments
	    #
	    orderArgs.parse_arguments(self.args)
	    
	    self.exec(orderArgs.parsed_args)
	

	
	

	def exec(self, arguments):
	
		self.args = parser.parse_args()
		
	    #
	    # Create the api context based on the contents of the
	    # v20 config file
	    #
	    api = args.config.create_context()
	    
	    #
	    # Use the api context's datetime formatter when serializing data
	    #
	    orderArgs.set_datetime_formatter(lambda dt: api.datetime_to_str(dt))
	
	    if self.args.replace_order_id is not None:
	        #
	        # Submit the request to cancel and replace a Limit Order
	        #
	        response = api.order.limit_replace(
	            args.config.active_account,
	            arguments.replace_order_id,
	            **arguments
	        )
	    else:
	        #
	        # Submit the request to create a Limit Order
	        #
	        response = api.order.limit(
	            args.config.active_account,
	            **orderArgs.parsed_args
	        )
			
		self.response = response
		
		if self.response.status == 201 and self.response.reason == "Created":
			self.trade_id = self.response.get("lastTransactionID", None)

    	print_order_create_response_transactions(response)
    	
    def get_trade_id(self):
        return self.trade_id

    def get_errors(self):
        return {
            'errorCode' : self.errorCode,
            'errorMessage' : self.errorMessage
        }

    def print_response(self):
        if self.response:
		    print("Response: {} ({})".format(self.response.status, self.response.reason))
		    print("")

            print_order_create_response_transactions(self.response)
# def main():
#     market = Market()
#     market.exec({'instrument': 'USD_JPY', 'units':1, 'take-profit-price' : 120, 'client-order-comment' : 'test'})
#     response = market.get_response()
#     transaction = market.get_transaction()
#     print(transaction)

def main():
    limit = Limit()
    limit.exec_by_cmd()
    limit.print_response()

if __name__ == "__main__":
    main()
